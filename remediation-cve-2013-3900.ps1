<#
.SYNOPSIS
    Remediates CVE-2013-3900 (WinVerifyTrust Signature Validation) by enabling Cert Padding Check.
    Creates the required registry keys on both 32-bit and 64-bit systems.

.DESCRIPTION
    Adds and sets the registry value EnableCertPaddingCheck to 1:
      - HKLM\Software\Microsoft\Cryptography\Wintrust\Config
      - HKLM\Software\Wow6432Node\Microsoft\Cryptography\Wintrust\Config (only on 64-bit systems)

    This mitigates the vulnerability related to signature validation (HIGH severity). PLUGIN ID: 166555

.AUTHOR
    Danny Cologero

.DATE CREATED
    10-15-2025

.VERSION
    1.2

.HOSTS
    Windows Server 2019 Datacenter (Build 1809)
    Windows 11
    PowerShell 5.1+

.USAGE
    1. Open PowerShell as Administrator.
    2. Navigate to the folder containing this script:
         cd C:\Path\To\Script
    3. Run the script:
         .\remediation-cve-2013-3900.ps1
    4. Check the log for details (created in C:\ProgramData\CVE-2013-3900_Remediation_Logs).

.VERIFICATION
    1. Registry values should exist and be set to 1.
    2. Log file should show successful remediation entries.

.NOTES
    Admin privileges required.
    Idempotent: Safe to run multiple times.
#>

# ----------------------------------------
# Logging Setup
# ----------------------------------------
$logFolder = "C:\ProgramData\CVE-2013-3900_Remediation_Logs"
if (-not (Test-Path -Path $logFolder)) {
    New-Item -ItemType Directory -Path $logFolder -Force | Out-Null
}
$logFile = "$logFolder\CVE-2013-3900_$(Get-Date -Format 'yyyyMMdd_HHmmss').log"

function Log ($msg) {
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $entry = "[$timestamp] $msg"
    Add-Content -Path $logFile -Value $entry
}

# ----------------------------------------
# Console Helpers
# ----------------------------------------
function Info ($msg)  { Write-Host "[INFO]  $msg" -ForegroundColor Cyan; Log $msg }
function Warn ($msg)  { Write-Host "[WARN]  $msg" -ForegroundColor Yellow; Log $msg }
function ErrorExit ($msg) { Write-Host "[ERROR] $msg" -ForegroundColor Red; Log $msg; exit 1 }

# Ensure script runs as administrator
if (-not ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole(`
    [Security.Principal.WindowsBuiltInRole] "Administrator")) {
    ErrorExit "Please run this script as Administrator."
}

# ----------------------------------------
# Define Registry Paths
# ----------------------------------------
$regPaths = @("HKLM:\Software\Microsoft\Cryptography\Wintrust\Config")

# Only add Wow6432Node path if OS is 64-bit
if ([Environment]::Is64BitOperatingSystem) {
    $regPaths += "HKLM:\Software\Wow6432Node\Microsoft\Cryptography\Wintrust\Config"
}

# ----------------------------------------
# Remediation
# ----------------------------------------
foreach ($path in $regPaths) {
    try {
        if (-not (Test-Path $path)) {
            Info "Registry path '$path' does not exist. Creating..."
            New-Item -Path $path -Force | Out-Null
        } else {
            Info "Registry path '$path' exists."
        }

        # Set EnableCertPaddingCheck = 1
        Info "Setting EnableCertPaddingCheck to 1 at '$path'."
        Set-ItemProperty -Path $path -Name "EnableCertPaddingCheck" -Value 1 -Type DWord -Force
        Info "Successfully set EnableCertPaddingCheck at '$path'."
    }
    catch {
        ErrorExit "Failed to set EnableCertPaddingCheck at '$path'. Error: $_"
    }
}

Info "CVE-2013-3900 remediation complete."
Log "CVE-2013-3900 remediation complete."

# ----------------------------------------
# Automatic Verification
# ----------------------------------------
Info "`nStarting automatic verification of remediation..."

foreach ($path in $regPaths) {
    try {
        $value = Get-ItemProperty -Path $path -Name "EnableCertPaddingCheck" -ErrorAction Stop | Select-Object -ExpandProperty EnableCertPaddingCheck

        if ($value -eq 1) {
            Info "PASS: EnableCertPaddingCheck is set to 1 at '$path'."
        } else {
            Warn "FAIL: EnableCertPaddingCheck is NOT set to 1 at '$path' (current value: $value)."
        }
    }
    catch {
        Warn "FAIL: Unable to read EnableCertPaddingCheck at '$path'. It may not exist."
    }
}

Info "`nVerification complete. Review logs at $logFile for details."
Write-Host "`nLogs saved at $logFile"
